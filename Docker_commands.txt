1. docker image build --tag image_custom_name .

2. docker container run --detach --publish host_port:container_port --name container_name  image_custom_name

3. docker rm --force container_name

4. docker image run --interactive --tty image_custom_name bash

5. docker image rm image_custom_name 

6. docker container ls -all

7. docker container stop container_name or container_ID

8. 
        docker container ps    : show all running containers
        docker container ps -a : Show all containers
                                
9. docker images -q |xargs docker rmi --force
        removing all unused docker images

10. docker ps -q |xargs docker rm 
        removing all stopped docker containers 

11. docker exec -it <container name> /bin/bash
        ssh into container

FROM 
https://docs.docker.com/engine/reference/builder/#dockerignore-file
FROM can appear multiple times within a single Dockerfile to create multiple images or use one build stage as a dependency
for another. Simply make a note of the last image ID output by the commit before each new FROM instruction. 
Each FROM instruction clears any state created by previous instructions.

Docker command looks like: INSTRUCTION args

List of INSTRUCTIONS:
ADD
COPY
ENV
EXPOSE
FROM
LABEL
STOPSIGNAL
USER
VOLUME
WORKDIR
ONBUILD
####################################################################################################################################
FROM:

FROM <image>[:<tag>] [AS <name>] or FROM <image>[@<digest>] [AS <name>]
Optionally a name can be given to a new build stage by adding AS name to the FROM instruction. 
The name can be used in subsequent FROM and COPY --from=<name|index> instructions to refer to the image built in this stage.
The tag or digest values are optional. If you omit either of them, the builder assumes a latest tag by default. 
The builder returns an error if it cannot find the tag value.
####################################################################################################################################

RUN:

RUN has 2 forms:
RUN <command> (shell form, the command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows)
RUN ["executable", "param1", "param2"] (exec form)

####################################################################################################################################
CMD:

The CMD instruction has three forms:

CMD ["executable","param1","param2"] (exec form, this is the preferred form)
CMD ["param1","param2"] (as default parameters to ENTRYPOINT)
CMD command param1 param2 (shell form)
There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.
The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, 
or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well.
If the user specifies arguments to docker run then they will override the default specified in CMD

####################################################################################################################################
Note: Don’t confuse RUN with CMD. RUN actually runs a command and commits the result; 
      CMD does not execute anything at build time, but specifies the intended command for the image.
####################################################################################################################################

LABEL:
The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes 
and backslashes as you would in command-line parsing
To view an image’s labels, use the docker inspect command.

LABEL "com.example.vendor"="ACME Incorporated"
LABEL com.example.label-with-value="foo"
LABEL version="1.0"
LABEL description="This text illustrates \
that label-values can span multiple lines."

####################################################################################################################################

EXPOSE:
The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. 
You can specify whether the port listens on TCP or UDP, and the default is TCP if the protocol is not specified.
The EXPOSE instruction does not actually publish the port. It functions as a type of documentation between the person who builds 
the image and the person who runs the container, about which ports are intended to be published. To actually publish the port when 
running the container, use the -p flag on docker run to publish and map one or more ports, or the -P flag to publish all exposed 
ports and map them to high-order ports.

By default, EXPOSE assumes TCP. You can also specify UDP:

EXPOSE 80/udp
To expose on both TCP and UDP, include two lines:

EXPOSE 80/tcp
EXPOSE 80/udp
In this case, if you use -P with docker run, the port will be exposed once for TCP and once for UDP. 
Remember that -P uses an ephemeral high-ordered host port on the host, so the port will not be the same for TCP and UDP.

Regardless of the EXPOSE settings, you can override them at runtime by using the -p flag. For example

docker run -p 80:80/tcp -p 80:80/udp ...
The docker network command supports creating networks for communication among containers without the need to expose or 
publish specific ports, because the containers connected to the network can communicate with each other over any port.

####################################################################################################################################
ENV:
ENV <key> <value>
ENV <key>=<value> 

The ENV instruction sets the environment variable <key> to the value <value>. This value will be in the environment for all 
subsequent instructions in the build stage
####################################################################################################################################

ADD:
ADD has two forms:

ADD [--chown=<user>:<group>] <src>... <dest>
ADD [--chown=<user>:<group>] ["<src>",... "<dest>"] (this form is required for paths containing whitespace)

The ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem 
of the image at the path <dest>

ADD test relativeDir/          # adds "test" to `WORKDIR`/relativeDir/
ADD test /absoluteDir/         # adds "test" to /absoluteDir/

####################################################################################################################################
COPY:
COPY has two forms:

COPY [--chown=<user>:<group>] <src>... <dest>
COPY [--chown=<user>:<group>] ["<src>",... "<dest>"] (this form is required for paths containing whitespace)
####################################################################################################################################
ENTRYPOINT
ENTRYPOINT has two forms:

ENTRYPOINT ["executable", "param1", "param2"] (exec form, preferred)
ENTRYPOINT command param1 param2 (shell form)

####################################################################################################################################
VOLUME:
The VOLUME instruction creates a mount point with the specified name and marks it as holding externally mounted volumes from native 
host or other containers.
####################################################################################################################################
USER:
USER <user>[:<group>] or
USER <UID>[:<GID>]
The USER instruction sets the user name (or UID) and optionally the user group (or GID) to use when running the image and for 
any RUN, CMD and ENTRYPOINT instructions that follow it in the Dockerfile.

FROM microsoft/windowsservercore
# Create Windows user in the container
RUN net user /add patrick
# Set it for subsequent commands
USER patrick
####################################################################################################################################
WORKDIR:

WORKDIR /path/to/workdir
The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile.
If the WORKDIR doesn’t exist, it will be created even if it’s not used in any subsequent Dockerfile instruction.

The WORKDIR instruction can be used multiple times in a Dockerfile. If a relative path is provided, it will be relative to 
the path of the previous WORKDIR instruction. For example:
WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
The output of the final pwd command in this Dockerfile would be /a/b/c.
####################################################################################################################################
ONBUILD:
ONBUILD [INSTRUCTION]
The ONBUILD instruction adds to the image a trigger instruction to be executed at a later time, when the image is used as the base 
for another build. The trigger will be executed in the context of the downstream build, as if it had been inserted immediately after
the FROM instruction in the downstream Dockerfile.